import { useEffect, useState } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useToast } from "@/hooks/use-toast";
import { useQuery } from "@tanstack/react-query";
import { isUnauthorizedError } from "@/lib/authUtils";
import Sidebar from "@/components/layout/sidebar";
import TopHeader from "@/components/layout/top-header";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { 
  Download, 
  Clock, 
  FileText, 
  BarChart3,
  TrendingUp,
  Calendar,
  Egg,
  DollarSign
} from "lucide-react";

export default function Reports() {
  const { toast } = useToast();
  const { isAuthenticated, isLoading } = useAuth();
  const [selectedReports, setSelectedReports] = useState<string[]>(["production"]);
  const [exportFormat, setExportFormat] = useState("pdf");
  const [dateRange, setDateRange] = useState("last_7_days");

  // Redirect to home if not authenticated
  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      toast({
        title: "Unauthorized",
        description: "You are logged out. Logging in again...",
        variant: "destructive",
      });
      setTimeout(() => {
        window.location.href = "/api/login";
      }, 500);
      return;
    }
  }, [isAuthenticated, isLoading, toast]);

  const { data: dashboardMetrics, error: metricsError } = useQuery({
    queryKey: ["/api/dashboard/metrics"],
    enabled: isAuthenticated,
  });

  const { data: productionData, error: productionError } = useQuery({
    queryKey: ["/api/production"],
    enabled: isAuthenticated,
  });

  const { data: financialData, error: financialError } = useQuery({
    queryKey: ["/api/finances"],
    enabled: isAuthenticated,
  });

  useEffect(() => {
    const errors = [metricsError, productionError, financialError].filter(Boolean);
    errors.forEach(error => {
      if (error && isUnauthorizedError(error as Error)) {
        toast({
          title: "Unauthorized",
          description: "You are logged out. Logging in again...",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 500);
      }
    });
  }, [metricsError, productionError, financialError, toast]);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-slate-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-slate-600">Loading reports...</p>
        </div>
      </div>
    );
  }

  const reportTypes = [
    { id: "production", label: "Daily Production Summary", icon: Egg },
    { id: "financial", label: "Financial Statement", icon: DollarSign },
    { id: "inventory", label: "Inventory Status", icon: BarChart3 },
    { id: "employees", label: "Employee Records", icon: FileText },
    { id: "health", label: "Health & Mortality Analysis", icon: TrendingUp },
  ];

  const recentExports = [
    { name: "Production_Report_Mar15.pdf", date: "March 15, 2024", size: "2.4 MB" },
    { name: "Inventory_Status_Mar14.csv", date: "March 14, 2024", size: "1.1 MB" },
    { name: "Financial_Summary_Mar13.xlsx", date: "March 13, 2024", size: "3.2 MB" },
    { name: "Employee_Report_Mar12.pdf", date: "March 12, 2024", size: "1.8 MB" },
  ];

  const handleReportToggle = (reportId: string) => {
    setSelectedReports(prev => 
      prev.includes(reportId) 
        ? prev.filter(id => id !== reportId)
        : [...prev, reportId]
    );
  };

  const handleGenerateReport = () => {
    if (selectedReports.length === 0) {
      toast({
        title: "Error",
        description: "Please select at least one report type",
        variant: "destructive",
      });
      return;
    }

    toast({
      title: "Report Generation Started",
      description: `Generating ${selectedReports.length} report(s) in ${exportFormat.toUpperCase()} format`,
    });

    // Simulate report generation
    setTimeout(() => {
      toast({
        title: "Reports Generated",
        description: "Your reports are ready for download",
      });
    }, 3000);
  };

  const handleScheduleReport = () => {
    toast({
      title: "Report Scheduled",
      description: "Your report has been scheduled for automatic generation",
    });
  };

  const handleDownloadExport = (fileName: string) => {
    toast({
      title: "Download Started",
      description: `Downloading ${fileName}`,
    });
  };

  // Calculate summary metrics for dashboard
  const totalRevenue = financialData?.filter((t: any) => t.type === 'revenue')
    .reduce((sum: number, t: any) => sum + parseFloat(t.amount), 0) || 0;
  
  const totalExpenses = financialData?.filter((t: any) => t.type === 'expense')
    .reduce((sum: number, t: any) => sum + parseFloat(t.amount), 0) || 0;
  
  const avgEggProduction = productionData?.reduce((sum: number, p: any) => sum + (p.eggProduction || 0), 0) / (productionData?.length || 1) || 0;

  return (
    <div className="min-h-screen flex bg-slate-50">
      <Sidebar />
      
      <main className="flex-1 ml-64">
        <TopHeader 
          title="Reports & Analytics" 
          subtitle="Generate comprehensive reports and business intelligence"
        />
        
        <div className="p-6 space-y-6">
          {/* KPI Overview Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            <Card className="border-primary/20 bg-primary/5">
              <CardContent className="p-6">
                <div className="flex items-center space-x-3">
                  <Egg className="h-8 w-8 text-primary" />
                  <div>
                    <h3 className="text-2xl font-bold text-slate-900">
                      {Math.round(avgEggProduction).toLocaleString()}
                    </h3>
                    <p className="text-slate-600">Avg Daily Production</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="border-success/20 bg-success/5">
              <CardContent className="p-6">
                <div className="flex items-center space-x-3">
                  <TrendingUp className="h-8 w-8 text-success" />
                  <div>
                    <h3 className="text-2xl font-bold text-slate-900">
                      ₦{totalRevenue.toLocaleString()}
                    </h3>
                    <p className="text-slate-600">Total Revenue</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="border-accent/20 bg-accent/5">
              <CardContent className="p-6">
                <div className="flex items-center space-x-3">
                  <DollarSign className="h-8 w-8 text-accent" />
                  <div>
                    <h3 className="text-2xl font-bold text-slate-900">
                      ₦{totalExpenses.toLocaleString()}
                    </h3>
                    <p className="text-slate-600">Total Expenses</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="border-secondary/20 bg-secondary/5">
              <CardContent className="p-6">
                <div className="flex items-center space-x-3">
                  <BarChart3 className="h-8 w-8 text-secondary" />
                  <div>
                    <h3 className="text-2xl font-bold text-slate-900">
                      ₦{(totalRevenue - totalExpenses).toLocaleString()}
                    </h3>
                    <p className="text-slate-600">Net Profit</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Report Generation */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="text-lg font-semibold text-slate-900">
                  Generate Reports
                </CardTitle>
                <div className="flex space-x-2">
                  <Button variant="outline" onClick={handleScheduleReport}>
                    <Clock className="w-4 h-4 mr-2" />
                    Schedule Report
                  </Button>
                  <Button onClick={handleGenerateReport} className="bg-primary hover:bg-primary/90">
                    <Download className="w-4 h-4 mr-2" />
                    Generate Report
                  </Button>
                </div>
              </div>
            </CardHeader>
            
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {/* Report Types */}
                <div className="space-y-4">
                  <h4 className="font-medium text-slate-900">Available Reports</h4>
                  <div className="space-y-3">
                    {reportTypes.map((report) => {
                      const Icon = report.icon;
                      return (
                        <div key={report.id} className="flex items-center space-x-3">
                          <Checkbox
                            id={report.id}
                            checked={selectedReports.includes(report.id)}
                            onCheckedChange={() => handleReportToggle(report.id)}
                          />
                          <Icon className="w-4 h-4 text-slate-500" />
                          <label
                            htmlFor={report.id}
                            className="text-sm text-slate-700 cursor-pointer flex-1"
                          >
                            {report.label}
                          </label>
                        </div>
                      );
                    })}
                  </div>
                </div>

                {/* Export Options */}
                <div className="space-y-4">
                  <h4 className="font-medium text-slate-900">Export Options</h4>
                  <div className="space-y-3">
                    <div>
                      <label className="block text-sm font-medium text-slate-700 mb-1">
                        Format
                      </label>
                      <Select value={exportFormat} onValueChange={setExportFormat}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="pdf">PDF (Presentation)</SelectItem>
                          <SelectItem value="csv">CSV (Data Analysis)</SelectItem>
                          <SelectItem value="excel">Excel (Detailed)</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-slate-700 mb-1">
                        Date Range
                      </label>
                      <Select value={dateRange} onValueChange={setDateRange}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="today">Today</SelectItem>
                          <SelectItem value="last_7_days">Last 7 Days</SelectItem>
                          <SelectItem value="last_30_days">Last 30 Days</SelectItem>
                          <SelectItem value="last_quarter">Last Quarter</SelectItem>
                          <SelectItem value="custom">Custom Range</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </div>

                {/* Recent Exports */}
                <div className="space-y-4">
                  <h4 className="font-medium text-slate-900">Recent Exports</h4>
                  <div className="space-y-3">
                    {recentExports.map((export, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-slate-50 rounded-lg">
                        <div className="flex items-center space-x-3">
                          <FileText className="w-4 h-4 text-slate-400" />
                          <div>
                            <p className="text-sm font-medium text-slate-900">{export.name}</p>
                            <p className="text-xs text-slate-500">{export.date} • {export.size}</p>
                          </div>
                        </div>
                        <Button 
                          variant="ghost" 
                          size="sm"
                          onClick={() => handleDownloadExport(export.name)}
                        >
                          <Download className="w-4 h-4" />
                        </Button>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Performance Trends */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>Performance Trends</span>
                <Select defaultValue="last_30_days">
                  <SelectTrigger className="w-48">
                    <Calendar className="w-4 h-4 mr-2" />
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="last_7_days">Last 7 Days</SelectItem>
                    <SelectItem value="last_30_days">Last 30 Days</SelectItem>
                    <SelectItem value="last_quarter">Last Quarter</SelectItem>
                    <SelectItem value="last_year">Last Year</SelectItem>
                  </SelectContent>
                </Select>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-64 bg-slate-50 rounded-lg flex items-center justify-center border-2 border-dashed border-slate-300">
                <div className="text-center">
                  <BarChart3 className="h-12 w-12 text-slate-400 mx-auto mb-4" />
                  <p className="text-slate-500">Performance Analytics Chart</p>
                  <p className="text-xs text-slate-400">Interactive data visualization</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Recent Production Data Table */}
          <Card>
            <CardHeader>
              <CardTitle>Recent Production Data</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="border rounded-lg">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Date</TableHead>
                      <TableHead>Egg Production</TableHead>
                      <TableHead>Feed Consumption</TableHead>
                      <TableHead>Mortality</TableHead>
                      <TableHead>Temperature</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {productionData?.slice(0, 10).map((data: any) => (
                      <TableRow key={data.id}>
                        <TableCell>{new Date(data.date).toLocaleDateString()}</TableCell>
                        <TableCell className="font-mono">{data.eggProduction || 0}</TableCell>
                        <TableCell className="font-mono">{data.feedConsumption || 0} kg</TableCell>
                        <TableCell className="font-mono">{data.mortality || 0}</TableCell>
                        <TableCell className="font-mono">{data.temperature || '-'}°C</TableCell>
                      </TableRow>
                    )) || (
                      <TableRow>
                        <TableCell colSpan={5} className="text-center py-8">
                          <div className="text-slate-500">
                            <BarChart3 className="w-12 h-12 mx-auto mb-4 opacity-50" />
                            <p>No production data available</p>
                          </div>
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  );
}
